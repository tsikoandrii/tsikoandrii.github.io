"use strict";function _createForOfIteratorHelper(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=_unsupportedIterableToArray(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,a=function(){};return{s:a,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,l=!0,i=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return l=e.done,e},e:function(e){i=!0,o=e},f:function(){try{l||null==n.return||n.return()}finally{if(i)throw o}}}}function _unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return _arrayLikeToArray(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(e,t):void 0}}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _classPrivateMethodGet(e,t,n){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return n}var getTemplate=function(e,t,n,r){var a=null!=e?e:"",o=t.map((function(e){var t="";return e.id===n&&(a=e.value,t="selected"),'\n            <li class="select-option '.concat(t,'" data-type="item" data-id="').concat(e.id,'">').concat(e.value,"</li>\n        ")}));return'\n    <div class="select-backdrop" data-type="backdrop">\n    \n    </div>\n    <div data-value class="select-input" data-type="input">\n        <span data-type="value">'.concat(a,'</span>\n        <div data-type="caret" class="select-caret">\n            <img src="').concat(r||"img/icons/blue-arrow.svg",'">\n        </div>\n    </div>\n    <div class="select-dropdown">\n        <ul class="select-options">\n           ').concat(o.join(""),"\n        </ul>\n    </div>\n    ")},_render=new WeakSet,_setup=new WeakSet,Select=function(){function e(t,n){_classCallCheck(this,e),_setup.add(this),_render.add(this),this.$elem=document.querySelector(t),this.options=n,this.selectedId=n.selectedId,this.caretImage=n.caretImg,this.data=[],_classPrivateMethodGet(this,_render,_render2).call(this),_classPrivateMethodGet(this,_setup,_setup2).call(this)}return _createClass(e,[{key:"clickHandler",value:function(e){var t=e.target.dataset.type;if("input"===t)this.toggle();else if("item"===t){var n=e.target.dataset.id;this.select(n),this.close()}else"backdrop"===t?this.close():this.toggle()}},{key:"select",value:function(e){this.selectedId=Number(e),this.$elem.querySelectorAll('[data-type="item"]').forEach((function(e){e.classList.remove("selected")})),this.$elem.querySelector('[data-id="'.concat(e,'"]')).classList.add("selected"),this.$value.textContent=this.current.value}},{key:"toggle",value:function(){this.isOpen?this.close():this.open()}},{key:"open",value:function(){this.$elem.classList.add("open")}},{key:"close",value:function(){this.$elem.classList.remove("open")}},{key:"destroy",value:function(){this.$elem.removeEventListener("click",this.clickHandler),this.$elem.innerHTML=""}},{key:"current",get:function(){var e=this;return this.data.find((function(t){return t.id===e.selectedId}))}},{key:"isOpen",get:function(){return this.$elem.classList.contains("open")}}]),e}(),_render2=function(){for(var e=this.options,t=e.placeholder,n=e.originalSelect,r=document.querySelector(n).childNodes,a=-1,o=0;o<r.length;o++)"#text"!==r[o].nodeName&&(a++,this.data.push({id:a,value:r[o].innerHTML}));document.querySelector(n).remove(),this.$elem.classList.add("select"),this.$elem.innerHTML=getTemplate(t,this.data,this.selectedId,this.caretImage)},_setup2=function(){this.clickHandler=this.clickHandler.bind(this),this.$elem.addEventListener("click",this.clickHandler),this.$value=this.$elem.querySelector('[data-type="value"]')},select=new Select("#select",{placeholder:"Please select category",originalSelect:"#originalSelect"}),langSelect=new Select("#langSelect",{originalSelect:"#oldLangSelect",selectedId:1,caretImg:"img/icons/yellow-arrow.svg"}),langSelect1=new Select("#langSelect1",{originalSelect:"#oldLangSelect1",selectedId:1,caretImg:"img/icons/yellow-arrow.svg"});window.s=langSelect;var anchors=document.querySelectorAll('a[href*="#"]');console.log(anchors);var _step,_iterator=_createForOfIteratorHelper(anchors);try{var _loop=function(){var e=_step.value;e.addEventListener("click",(function(t){t.preventDefault();var n=e.getAttribute("href");document.querySelector(""+n).scrollIntoView({behavior:"smooth",block:"start"})}))};for(_iterator.s();!(_step=_iterator.n()).done;)_loop()}catch(e){_iterator.e(e)}finally{_iterator.f()}var getModalTemplate=function(e){return'\n        <div class="overlay">\n            <div class="modal-body animate__animated animate__backInDown">\n                <div class="modal-header">\n                    <div data-type="close" class="modal-close">&times;</div>\n                </div>\n                <div class="modal-content">\n                    '.concat(e,"\n                </div>\n            </div>\n        </div>\n    ")},_render3=new WeakSet,_setup3=new WeakSet,Modal=function(){function e(t,n){_classCallCheck(this,e),_setup3.add(this),_render3.add(this),this.$el=document.querySelector(t),this.selector=t,this.openButton=n.openButton,console.log(n.openButton),_classPrivateMethodGet(this,_render3,_render4).call(this),_classPrivateMethodGet(this,_setup3,_setup4).call(this)}return _createClass(e,[{key:"clickHandler",value:function(e){var t=e.target.dataset.type;console.log(e.target.dataset),"close"===t?(console.log("This method has been worked!"),this.close()):"open"===t&&this.open()}},{key:"open",value:function(){console.log(this),this.$el.classList.add("open")}},{key:"close",value:function(){document.querySelector(this.selector).classList.remove("open"),document.querySelector(this.selector).classList.remove("animate__backInDown")}}]),e}(),_render4=function(){var e=this.$el.innerHTML;this.$el.classList.add("modal"),this.$el.innerHTML=getModalTemplate(e)},_setup4=function(){this.clickHandler=this.clickHandler.bind(this),console.log(this.clickHandler),document.addEventListener("click",this.clickHandler)},modal=new Modal("#modal",{openButton:"#openModal"});window.m=modal;var mobileMenu=document.querySelector("#mobileMenu"),burger=document.querySelector("#burger"),closeMenu=document.querySelector("#closeMenu");burger.addEventListener("touchstart",(function(){mobileMenu.classList.add("active")})),closeMenu.addEventListener("touchstart",(function(){mobileMenu.classList.remove("active")}));var works=document.querySelectorAll(".work");console.log(works),works.forEach((function(e){e.addEventListener("click",(function(){works.forEach((function(e){e.classList.remove("clicked")})),e.classList.add("clicked")}))}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
